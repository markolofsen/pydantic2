{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pydantic2 \ud83d\ude80","text":"<p>A powerful Python framework for building AI applications with structured responses, powered by Pydantic AI and OpenRouter.</p> <p></p> <p> </p>"},{"location":"#introduction","title":"Introduction","text":"<p>Pydantic2 combines the power of large language models with structured outputs using Pydantic. This framework allows you to:</p> <ul> <li>Define structured output formats using Pydantic models</li> <li>Connect to various LLM providers through a unified interface</li> <li>Track usage and costs</li> <li>Enable internet search capabilities</li> <li>Manage response budgets</li> <li>Handle errors gracefully</li> <li>View and analyze usage data through built-in tools</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd12 Type-Safe Responses: Built on Pydantic AI for robust type validation</li> <li>\ud83c\udf10 Online Search: Real-time internet access for up-to-date information</li> <li>\ud83d\udcb0 Budget Control: Built-in cost tracking and budget management</li> <li>\ud83d\udcca Usage Monitoring: Detailed token and cost tracking</li> <li>\ud83d\udd04 Async Support: Both sync and async interfaces</li> <li>\ud83d\udee1\ufe0f Error Handling: Comprehensive exception system</li> <li>\ud83c\udfa8 Colored Logging: Beautiful console output with detailed logs</li> <li>\ud83d\udd0d Database Viewer: Built-in CLI tools to inspect models and usage databases</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from typing import List\nfrom pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient, ModelSettings\n\n# Define your response model\nclass ChatResponse(BaseModel):\n    message: str = Field(description=\"The chat response message\")\n    sources: List[str] = Field(default_factory=list, description=\"Sources used\")\n    confidence: float = Field(ge=0, le=1, description=\"Confidence score\")\n\n# Initialize client\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini-2024-07-18\",\n    client_id=\"my_app\",           # Required for usage tracking\n    user_id=\"user123\",           # Required for usage tracking\n    verbose=True,\n    online=True,                 # Enable internet access\n    max_budget=10.0,            # Set $10 budget limit\n    model_settings=ModelSettings(\n        max_tokens=1000,\n        temperature=0.7,\n        top_p=1,\n        frequency_penalty=0,\n    )\n)\n\n# Add context\nclient.message_handler.add_message_system(\n    \"You are a helpful AI assistant. Be concise but informative.\"\n)\n\n# Add user message\nclient.message_handler.add_message_user(\n    \"What is the capital of France?\"\n)\n\n# Generate response\nresponse: ChatResponse = client.generate(\n    result_type=ChatResponse\n)\n\nprint(f\"Message: {response.message}\")\nprint(f\"Sources: {response.sources}\")\nprint(f\"Confidence: {response.confidence}\")\n\n# Get usage statistics\nstats = client.get_usage_stats()\nprint(f\"Total cost: ${stats.get('total_cost', 0):.4f}\")\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - How to install Pydantic2</li> <li>Quick Start - Get up and running in minutes</li> <li>Configuration - Configure Pydantic2 for your needs</li> </ul>"},{"location":"#core-concepts","title":"Core Concepts","text":"<ul> <li>Type-Safe Responses - Structure AI outputs with Pydantic</li> <li>Online Search - Enable real-time internet access</li> <li>Budget Management - Control your API costs</li> <li>Error Handling - Handle exceptions gracefully</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Client - Main client interface</li> <li>Usage Tracking - Monitor costs and usage</li> </ul>"},{"location":"#cli-tools","title":"CLI Tools","text":"<ul> <li>Database Viewing - View and analyze your usage and models databases</li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Basic Usage - Simple examples to get started</li> <li>Chat Completion - Create chatbot applications</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! See the project repository on GitHub for more information.</p>"},{"location":"cli/","title":"CLI Tools","text":"<p>Pydantic2 includes built-in command-line tools that help you interact with your databases and monitor usage.</p>"},{"location":"cli/#database-viewing","title":"Database Viewing","text":"<p>Pydantic2 stores information in two SQLite databases:</p> <ol> <li>Models Database: Contains information about models, their parameters, and configurations</li> <li>Usage Database: Tracks usage statistics, token counts, and costs</li> </ol> <p>You can view these databases using the built-in CLI tools that leverage Datasette to provide a web interface for exploring the data.</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>The CLI tools are automatically installed when you install Pydantic2:</p> <pre><code>pip install pydantic2\n</code></pre>"},{"location":"cli/#command-reference","title":"Command Reference","text":""},{"location":"cli/#main-command","title":"Main Command","text":"<pre><code>pydantic2 [OPTIONS]\n</code></pre> <p>Available options:</p> Option Description <code>--view-models</code> View models database in browser at http://localhost:8001 <code>--view-usage</code> View usage database in browser at http://localhost:8002 <code>--view-all</code> View both databases simultaneously <code>--help</code> Show help message and available options"},{"location":"cli/#examples","title":"Examples","text":"<p>View models database: <pre><code>pydantic2 --view-models\n</code></pre></p> <p>View usage statistics: <pre><code>pydantic2 --view-usage\n</code></pre></p> <p>View both databases: <pre><code>pydantic2 --view-all\n</code></pre></p> <p>Get help: <pre><code>pydantic2 --help\n</code></pre></p>"},{"location":"cli/#legacy-commands","title":"Legacy Commands","text":"<p>For backward compatibility, the following commands are also available:</p> <pre><code>pydantic2-view-models\npydantic2-view-usage\npydantic2-view-all\n</code></pre>"},{"location":"cli/#using-datasette","title":"Using Datasette","text":"<p>The web interface provides several powerful features:</p> <ol> <li>SQL Editor: Run custom SQL queries against your databases</li> <li>Export: Download query results in various formats (CSV, JSON, etc.)</li> <li>Filtering: Filter table views by column values</li> <li>Pagination: Navigate through large datasets</li> </ol>"},{"location":"cli/#database-schema","title":"Database Schema","text":""},{"location":"cli/#models-database","title":"Models Database","text":"<p>The models database typically contains tables such as:</p> <ul> <li><code>models</code>: Information about available models</li> <li><code>parameters</code>: Parameters associated with each model</li> <li><code>capabilities</code>: Features supported by each model</li> </ul>"},{"location":"cli/#usage-database","title":"Usage Database","text":"<p>The usage database typically contains tables such as:</p> <ul> <li><code>requests</code>: Individual API requests</li> <li><code>tokens</code>: Token usage per request</li> <li><code>costs</code>: Cost information per request</li> <li><code>summary</code>: Aggregated usage statistics</li> </ul>"},{"location":"cli/#technical-details","title":"Technical Details","text":"<p>The CLI tools are implemented in <code>pydantic2.utils.cli</code> and use the Click library to provide a user-friendly command-line interface. The database paths are automatically determined based on the package installation location.</p> <p>If you need to customize the CLI behavior, you can modify the <code>cli.py</code> file or extend it with additional commands.</p>"},{"location":"cli/#customizing-port-numbers","title":"Customizing Port Numbers","text":"<p>By default, the databases are served on ports 8001 and 8002. If you need to use different ports, you can modify the <code>cli.py</code> file in the package source code.</p>"},{"location":"api/client/","title":"Client API Reference","text":""},{"location":"api/client/#pydanticaiclient","title":"PydanticAIClient","text":"<p>The main interface for interacting with language models.</p> <pre><code>from pydantic2 import PydanticAIClient, ModelSettings\n</code></pre>"},{"location":"api/client/#constructor-parameters","title":"Constructor Parameters","text":"<pre><code>client = PydanticAIClient(\n    # Required Parameters\n    model_name: str,                # Model identifier (e.g., \"openai/gpt-4o-mini-2024-07-18\")\n\n    # Optional Parameters\n    api_key: Optional[str] = None,  # OpenRouter API key (can be set via env var)\n    base_url: str = \"https://openrouter.ai/api/v1\",  # API base URL\n\n    # Usage Tracking (both required if using tracking)\n    client_id: Optional[str] = None,  # Client identifier\n    user_id: Optional[str] = None,    # User identifier\n\n    # Behavior Settings\n    verbose: bool = False,   # Enable detailed logging\n    retries: int = 3,       # Number of retry attempts\n    online: bool = False,   # Enable internet access\n    max_budget: Optional[float] = None,  # Maximum budget in USD\n\n    # Model Settings\n    model_settings: Optional[ModelSettings] = None  # Model-specific parameters\n)\n</code></pre>"},{"location":"api/client/#modelsettings","title":"ModelSettings","text":"<p>Configure model-specific parameters:</p> <pre><code>model_settings = ModelSettings(\n    max_tokens: Optional[int] = None,     # Maximum tokens in response\n    temperature: float = 0.7,             # Response randomness (0-1)\n    top_p: float = 1.0,                  # Nucleus sampling parameter\n    frequency_penalty: float = 0.0,       # Penalty for frequent tokens\n)\n</code></pre>"},{"location":"api/client/#methods","title":"Methods","text":""},{"location":"api/client/#generate-response","title":"Generate Response","text":"<pre><code>response = client.generate(\n    result_type: Type[BaseModel],  # Pydantic model for response\n    model_settings: Optional[ModelSettings] = None  # Override default settings\n)\n</code></pre>"},{"location":"api/client/#generate-response-async","title":"Generate Response (Async)","text":"<pre><code>response = await client.generate_async(\n    result_type: Type[BaseModel],  # Pydantic model for response\n    model_settings: Optional[ModelSettings] = None  # Override default settings\n)\n</code></pre>"},{"location":"api/client/#get-usage-statistics","title":"Get Usage Statistics","text":"<pre><code>stats = client.get_usage_stats()\n# Returns:\n{\n    'total_requests': int,\n    'total_tokens': int,\n    'total_cost': float,\n    'models': List[Dict]  # Per-model statistics\n}\n</code></pre>"},{"location":"api/client/#print-usage-information","title":"Print Usage Information","text":"<pre><code>client.print_usage_info()  # Prints detailed usage statistics\n</code></pre>"},{"location":"api/client/#context-managers","title":"Context Managers","text":"<pre><code># Synchronous\nwith PydanticAIClient() as client:\n    response = client.generate(...)\n\n# Asynchronous\nasync with PydanticAIClient() as client:\n    response = await client.generate_async(...)\n</code></pre>"},{"location":"api/client/#messagehandler","title":"MessageHandler","text":"<p>Build conversations through the message handler:</p> <pre><code># Access via client\nhandler = client.message_handler\n</code></pre>"},{"location":"api/client/#methods_1","title":"Methods","text":"<pre><code># Add system message (instructions)\nhandler.add_message_system(content: str)\n\n# Add user message\nhandler.add_message_user(content: str)\n\n# Add assistant message (for context)\nhandler.add_message_assistant(content: str)\n\n# Add structured data\nhandler.add_message_block(block_type: str, content: dict)\n\n# Get all messages\nmessages = handler.get_messages()\n\n# Get system prompt\nsystem_prompt = handler.get_system_prompt()\n\n# Get conversation\nconversation = handler.get_user_prompt()\n\n# Clear all messages\nhandler.clear()\n</code></pre>"},{"location":"api/client/#exceptions","title":"Exceptions","text":"<pre><code>from pydantic2.client.exceptions import (\n    PydanticAIError,          # Base exception\n    BudgetExceeded,          # Budget limit exceeded\n    ErrorGeneratingResponse,  # Generation error\n    ModelNotFound,           # Model not available\n    InvalidConfiguration,    # Invalid client config\n    ValidationError,        # Response validation failed\n    NetworkError           # Network/HTTP error\n)\n</code></pre>"},{"location":"api/client/#exception-details","title":"Exception Details","text":""},{"location":"api/client/#budgetexceeded","title":"BudgetExceeded","text":"<pre><code>except BudgetExceeded as e:\n    print(f\"Budget: ${e.budget_limit:.4f}\")\n    print(f\"Cost: ${e.current_cost:.4f}\")\n</code></pre>"},{"location":"api/client/#validationerror","title":"ValidationError","text":"<pre><code>except ValidationError as e:\n    print(f\"Message: {e.message}\")\n    print(f\"Model: {e.model}\")\n    print(f\"Errors: {e.errors}\")\n</code></pre>"},{"location":"api/client/#networkerror","title":"NetworkError","text":"<pre><code>except NetworkError as e:\n    print(f\"Status: {e.status_code}\")\n    print(f\"Message: {e.message}\")\n    print(f\"Response: {e.response}\")\n</code></pre>"},{"location":"api/client/#errorgeneratingresponse","title":"ErrorGeneratingResponse","text":"<pre><code>except ErrorGeneratingResponse as e:\n    print(f\"Message: {e.message}\")\n    print(f\"Error: {e.error}\")\n    print(f\"Details: {e.details}\")\n</code></pre>"},{"location":"api/usage/","title":"Usage Tracking API","text":"<p>Pydantic2 provides comprehensive usage tracking and analytics capabilities.</p>"},{"location":"api/usage/#overview","title":"Overview","text":"<p>The usage tracking system: 1. Records all API requests and responses 2. Tracks token usage and costs 3. Stores data in a local SQLite database 4. Provides usage statistics and reporting</p>"},{"location":"api/usage/#requirements","title":"Requirements","text":"<p>To enable usage tracking, you must provide both: - <code>client_id</code>: Identifier for your application - <code>user_id</code>: Identifier for the end user</p> <pre><code>from pydantic2 import PydanticAIClient\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini-2024-07-18\",\n    client_id=\"my_app\",      # Required for tracking\n    user_id=\"user123\"       # Required for tracking\n)\n</code></pre>"},{"location":"api/usage/#accessing-usage-data","title":"Accessing Usage Data","text":""},{"location":"api/usage/#get-usage-statistics","title":"Get Usage Statistics","text":"<pre><code># Get overall statistics\nstats = client.get_usage_stats()\nprint(f\"Total Requests: {stats['total_requests']}\")\nprint(f\"Total Tokens: {stats['total_tokens']}\")\nprint(f\"Total Cost: ${stats['total_cost']:.4f}\")\n\n# Print detailed information\nclient.print_usage_info()\n\n# Get per-model statistics\nfor model in stats['models']:\n    print(f\"\\nModel: {model['model_name']}\")\n    print(f\"Requests: {model['requests']}\")\n    print(f\"Tokens: {model['tokens']}\")\n    print(f\"Cost: ${model['cost']:.4f}\")\n</code></pre>"},{"location":"api/usage/#view-usage-database","title":"View Usage Database","text":"<p>Use the built-in CLI tool: <pre><code># View usage database in browser (http://localhost:8002)\npydantic2 --view-usage\n</code></pre></p>"},{"location":"api/usage/#database-schema","title":"Database Schema","text":"<p>The usage database (<code>usage.db</code>) contains the following table:</p>"},{"location":"api/usage/#usagelog","title":"UsageLog","text":"Column Type Description id AutoField Unique identifier client_id CharField Client identifier user_id CharField User identifier request_id CharField Request identifier model_name CharField Model used raw_request TextField Raw request data raw_response TextField Raw response data error_message TextField Error message (if any) prompt_tokens IntegerField Tokens in prompt completion_tokens IntegerField Tokens in completion total_tokens IntegerField Total tokens used total_cost FloatField Total cost in USD response_time FloatField Response time in seconds status CharField Request status created_at DateTimeField Creation timestamp updated_at DateTimeField Last update timestamp"},{"location":"api/usage/#model-pricing","title":"Model Pricing","text":"<p>Model prices are automatically fetched from OpenRouter and stored in a local database (<code>models.db</code>).</p>"},{"location":"api/usage/#viewing-model-prices","title":"Viewing Model Prices","text":"<p>Use the CLI tool: <pre><code># View models database in browser (http://localhost:8001)\npydantic2 --view-models\n</code></pre></p>"},{"location":"api/usage/#price-updates","title":"Price Updates","text":"<ul> <li>Prices are automatically updated when initializing <code>PydanticAIClient</code></li> <li>Updates occur if the last update was more than 24 hours ago</li> <li>Force updates by initializing with <code>force_update=True</code></li> </ul>"},{"location":"api/usage/#budget-management","title":"Budget Management","text":"<p>Set budget limits and monitor usage:</p> <pre><code>client = PydanticAIClient(\n    client_id=\"my_app\",\n    user_id=\"user123\",\n    max_budget=1.0  # $1.00 USD limit\n)\n\ntry:\n    response = client.generate(...)\nexcept BudgetExceeded as e:\n    print(f\"Budget exceeded: ${e.current_cost:.4f} / ${e.budget_limit:.4f}\")\n</code></pre>"},{"location":"api/usage/#best-practices","title":"Best Practices","text":"<ol> <li>Always provide <code>client_id</code> and <code>user_id</code> for accurate tracking</li> <li>Monitor usage regularly using <code>get_usage_stats()</code></li> <li>Set appropriate budget limits for your use case</li> <li>Use the CLI tools to analyze detailed usage patterns</li> <li>Handle <code>BudgetExceeded</code> exceptions gracefully</li> </ol>"},{"location":"core-concepts/budget-management/","title":"Budget Management","text":"<p>Pydantic2 provides built-in budget management capabilities to help control API costs.</p>"},{"location":"core-concepts/budget-management/#requirements","title":"Requirements","text":"<p>To enable budget management and usage tracking, you must provide both: - <code>client_id</code>: Identifier for your application - <code>user_id</code>: Identifier for the end user</p> <p>Without these identifiers, usage tracking and budget management will not function.</p>"},{"location":"core-concepts/budget-management/#basic-setup","title":"Basic Setup","text":"<pre><code>from pydantic2 import PydanticAIClient\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini-2024-07-18\",\n    client_id=\"my_app\",      # Required for tracking\n    user_id=\"user123\",       # Required for tracking\n    max_budget=10.0          # Optional: Set $10 limit\n)\n</code></pre>"},{"location":"core-concepts/budget-management/#tracking-usage","title":"Tracking Usage","text":"<p>Once configured, you can monitor usage:</p> <pre><code># Get current usage statistics\nstats = client.get_usage_stats()\nprint(f\"Total cost: ${stats.get('total_cost', 0):.4f}\")\n\n# Print detailed usage information\nclient.print_usage_info()\n</code></pre>"},{"location":"core-concepts/budget-management/#budget-limits","title":"Budget Limits","text":"<p>When <code>max_budget</code> is set:</p> <ol> <li>Each request checks the current total cost</li> <li>If a request would exceed the budget, <code>BudgetExceeded</code> is raised</li> <li>The budget is checked both before and after each request</li> </ol> <pre><code>try:\n    response: MyModel = client.generate(result_type=MyModel)\nexcept BudgetExceeded as e:\n    print(f\"Budget limit reached: {e}\")\n</code></pre>"},{"location":"core-concepts/budget-management/#usage-database","title":"Usage Database","text":"<p>Usage data is stored in a local SQLite database, tracking:</p> <ul> <li>Token counts</li> <li>Costs per request</li> <li>Model usage</li> <li>Response times</li> <li>Success/error status</li> </ul> <p>View the database using the CLI tool: <pre><code>pydantic2 --view-usage\n</code></pre></p>"},{"location":"core-concepts/budget-management/#per-model-statistics","title":"Per-Model Statistics","text":"<p>Get detailed statistics per model:</p> <pre><code>stats = client.get_usage_stats()\nfor model in stats.get('models', []):\n    print(f\"Model: {model['model_name']}\")\n    print(f\"Requests: {model['requests']}\")\n    print(f\"Tokens: {model['tokens']}\")\n    print(f\"Cost: ${model['cost']:.4f}\")\n</code></pre>"},{"location":"core-concepts/budget-management/#best-practices","title":"Best Practices","text":"<ol> <li>Always provide <code>client_id</code> and <code>user_id</code> for accurate tracking</li> <li>Set appropriate budget limits for your use case</li> <li>Monitor usage regularly using <code>get_usage_stats()</code></li> <li>Use the CLI tools to analyze detailed usage patterns</li> <li>Handle <code>BudgetExceeded</code> exceptions gracefully</li> </ol>"},{"location":"core-concepts/error-handling/","title":"Error Handling","text":"<p>Pydantic2 provides a comprehensive error handling system to manage various failure scenarios.</p>"},{"location":"core-concepts/error-handling/#exception-hierarchy","title":"Exception Hierarchy","text":"<p>All exceptions inherit from the base <code>PydanticAIError</code>:</p> <pre><code>from pydantic2.client.exceptions import (\n    PydanticAIError,          # Base exception\n    BudgetExceeded,          # Budget limit exceeded\n    ErrorGeneratingResponse,  # Generation error\n    ModelNotFound,           # Model not available\n    InvalidConfiguration,    # Invalid client config\n    ValidationError,        # Response validation failed\n    NetworkError           # Network/HTTP error\n)\n</code></pre>"},{"location":"core-concepts/error-handling/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>from pydantic2 import PydanticAIClient\nfrom pydantic2.client.exceptions import PydanticAIError\n\nclient = PydanticAIClient()\n\ntry:\n    response = client.generate(\n        result_type=MyResponseModel\n    )\nexcept PydanticAIError as e:\n    print(f\"Error: {str(e)}\")\n</code></pre>"},{"location":"core-concepts/error-handling/#specific-exceptions","title":"Specific Exceptions","text":""},{"location":"core-concepts/error-handling/#budgetexceeded","title":"BudgetExceeded","text":"<p>Raised when request cost would exceed the budget limit:</p> <pre><code>try:\n    response = client.generate(...)\nexcept BudgetExceeded as e:\n    print(f\"Budget limit: ${e.budget_limit:.4f}\")\n    print(f\"Current cost: ${e.current_cost:.4f}\")\n    # Request additional budget or handle gracefully\n</code></pre>"},{"location":"core-concepts/error-handling/#validationerror","title":"ValidationError","text":"<p>Raised when model response doesn't match the Pydantic model:</p> <pre><code>try:\n    response = client.generate(...)\nexcept ValidationError as e:\n    print(f\"Validation failed: {e.message}\")\n    if e.model:\n        print(f\"Model: {e.model.__class__.__name__}\")\n    if e.errors:\n        print(\"Errors:\")\n        for error in e.errors:\n            print(f\"- {error}\")\n</code></pre>"},{"location":"core-concepts/error-handling/#networkerror","title":"NetworkError","text":"<p>Raised for HTTP/network-related failures:</p> <pre><code>try:\n    response = client.generate(...)\nexcept NetworkError as e:\n    print(f\"Network error: {e.message}\")\n    if e.status_code:\n        print(f\"Status code: {e.status_code}\")\n    if e.response:\n        print(f\"Response: {e.response}\")\n</code></pre>"},{"location":"core-concepts/error-handling/#errorgeneratingresponse","title":"ErrorGeneratingResponse","text":"<p>Raised when the model fails to generate a response:</p> <pre><code>try:\n    response = client.generate(...)\nexcept ErrorGeneratingResponse as e:\n    print(f\"Generation failed: {e.message}\")\n    print(f\"Error: {e.error}\")\n    if e.details:\n        print(f\"Details: {e.details}\")\n</code></pre>"},{"location":"core-concepts/error-handling/#modelnotfound","title":"ModelNotFound","text":"<p>Raised when the requested model is not available:</p> <pre><code>try:\n    response = client.generate(...)\nexcept ModelNotFound as e:\n    print(f\"Model '{e.model_name}' not found\")\n    # Switch to alternative model\n</code></pre>"},{"location":"core-concepts/error-handling/#invalidconfiguration","title":"InvalidConfiguration","text":"<p>Raised for invalid client configuration:</p> <pre><code>try:\n    client = PydanticAIClient(...)\nexcept InvalidConfiguration as e:\n    print(f\"Invalid config: {e.message}\")\n    # Fix configuration and retry\n</code></pre>"},{"location":"core-concepts/error-handling/#error-recovery-strategies","title":"Error Recovery Strategies","text":""},{"location":"core-concepts/error-handling/#automatic-retries","title":"Automatic Retries","text":"<p>The client automatically retries on certain errors:</p> <pre><code>client = PydanticAIClient(\n    retries=3  # Number of retry attempts\n)\n</code></pre>"},{"location":"core-concepts/error-handling/#budget-management","title":"Budget Management","text":"<p>Handle budget limits gracefully:</p> <pre><code>try:\n    response = client.generate(...)\nexcept BudgetExceeded as e:\n    remaining = e.budget_limit - e.current_cost\n    if remaining &lt; 0:\n        print(f\"Over budget by ${abs(remaining):.4f}\")\n    # Request budget increase or pause operations\n</code></pre>"},{"location":"core-concepts/error-handling/#validation-recovery","title":"Validation Recovery","text":"<p>Handle validation errors with fallback logic:</p> <pre><code>try:\n    response = client.generate(...)\nexcept ValidationError as e:\n    # Log the error\n    print(f\"Validation failed: {e.message}\")\n\n    # Try to fix the data\n    if e.received_data:\n        try:\n            # Attempt to clean/fix the data\n            fixed_data = clean_response_data(e.received_data)\n            # Create model instance manually\n            response = MyResponseModel(**fixed_data)\n        except Exception as fix_error:\n            print(f\"Could not fix data: {fix_error}\")\n</code></pre>"},{"location":"core-concepts/error-handling/#best-practices","title":"Best Practices","text":"<ol> <li>Always catch specific exceptions before general ones</li> <li>Log errors with sufficient context</li> <li>Implement appropriate retry logic</li> <li>Have fallback strategies for critical operations</li> <li>Monitor error patterns</li> <li>Set appropriate timeouts and budgets</li> <li>Validate responses carefully</li> </ol>"},{"location":"core-concepts/error-handling/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Budget Management in Budget Management</li> <li>Explore Type-Safe Responses in Type-Safe Responses</li> <li>Check out the CLI Tools in CLI Tools</li> </ul>"},{"location":"core-concepts/message-handling/","title":"Message Handling","text":"<p>The <code>message_handler</code> is the core component for building conversations with AI models in Pydantic2. It manages different types of messages and formats them appropriately.</p>"},{"location":"core-concepts/message-handling/#message-types","title":"Message Types","text":""},{"location":"core-concepts/message-handling/#1-system-messages","title":"1. System Messages","text":"<p>Set behavior and context for the AI: <pre><code>client.message_handler.add_message_system(\n    \"You are a helpful AI assistant specializing in Python programming.\"\n)\n</code></pre></p>"},{"location":"core-concepts/message-handling/#2-user-messages","title":"2. User Messages","text":"<p>Add user inputs to the conversation: <pre><code>client.message_handler.add_message_user(\n    \"How do I handle exceptions in Python?\"\n)\n</code></pre></p>"},{"location":"core-concepts/message-handling/#3-assistant-messages","title":"3. Assistant Messages","text":"<p>Add AI responses for multi-turn conversations: <pre><code>client.message_handler.add_message_assistant(\n    \"Exceptions in Python are handled using try-except blocks...\"\n)\n</code></pre></p>"},{"location":"core-concepts/message-handling/#4-structured-data-blocks","title":"4. Structured Data Blocks","text":"<p>Add any data that can be formatted as YAML. The message handler automatically converts and formats the data:</p> <pre><code># Dictionary example\nclient.message_handler.add_message_block(\n    \"PARAMETERS\",\n    {\n        \"temperature\": 0.7,\n        \"max_tokens\": 100,\n        \"nested\": {\n            \"key\": \"value\",\n            \"list\": [1, 2, 3]\n        }\n    }\n)\n\n# List example\nclient.message_handler.add_message_block(\n    \"AVAILABLE_MODELS\",\n    [\"gpt-4\", \"claude-2\", \"llama-2\"]\n)\n\n# Mixed data types\nclient.message_handler.add_message_block(\n    \"CONTEXT\",\n    {\n        \"numbers\": [1, 2, 3],\n        \"text\": \"Sample text\",\n        \"boolean\": True,\n        \"float\": 3.14,\n        \"nested_list\": [\n            {\"name\": \"item1\", \"value\": 100},\n            {\"name\": \"item2\", \"value\": 200}\n        ]\n    }\n)\n\n# Complex structures\nclient.message_handler.add_message_block(\n    \"DATABASE_SCHEMA\",\n    {\n        \"tables\": {\n            \"users\": {\n                \"columns\": [\"id\", \"name\", \"email\"],\n                \"primary_key\": \"id\",\n                \"indexes\": [\"email\"],\n                \"relationships\": [\n                    {\"table\": \"orders\", \"type\": \"one-to-many\"}\n                ]\n            }\n        }\n    }\n)\n</code></pre> <p>All data is automatically formatted into clean, readable YAML: <pre><code>PARAMETERS:\n  temperature: 0.7\n  max_tokens: 100\n  nested:\n    key: value\n    list:\n      - 1\n      - 2\n      - 3\n\nAVAILABLE_MODELS:\n  - gpt-4\n  - claude-2\n  - llama-2\n\nCONTEXT:\n  numbers:\n    - 1\n    - 2\n    - 3\n  text: Sample text\n  boolean: true\n  float: 3.14\n  nested_list:\n    - name: item1\n      value: 100\n    - name: item2\n      value: 200\n</code></pre></p>"},{"location":"core-concepts/message-handling/#supported-data-types","title":"Supported Data Types","text":"<p>The message handler supports any combination of these types: - Strings: Any text content - Numbers: Integers and floats - Booleans: True/False values - Lists: Arrays of any supported type - Dictionaries: Nested structures - None/null: Represented as <code>null</code> in YAML - Mixed Types: Any combination of the above</p> <p>All data is automatically: - Properly indented - Type-preserved - Unicode-safe - Formatted for readability</p>"},{"location":"core-concepts/message-handling/#message-management","title":"Message Management","text":""},{"location":"core-concepts/message-handling/#available-methods","title":"Available Methods","text":"<pre><code># Clear all messages\nclient.message_handler.clear()\n\n# Get all messages in raw format\nmessages = client.message_handler.get_messages()\n\n# Get combined system messages\nsystem_prompt = client.message_handler.get_system_prompt()\n\n# Get combined user and assistant messages\nconversation = client.message_handler.get_user_prompt()\n\n# Get formatted request for logging\nraw_request = client.message_handler.format_raw_request()\n\n# Get human-readable format of all messages\nformatted = client.message_handler.get_formatted_prompt()\n</code></pre>"},{"location":"core-concepts/message-handling/#internal-message-structure","title":"Internal Message Structure","text":"<p>Messages are stored as dictionaries with role and content: <pre><code>{\n    \"role\": \"system\" | \"user\" | \"assistant\",\n    \"content\": str\n}\n</code></pre></p>"},{"location":"core-concepts/message-handling/#data-formatting","title":"Data Formatting","text":"<p>The message handler supports and automatically formats: - Basic types: str, int, float, bool - Complex types: dict, list - YAML formatting for structured data - Unicode characters - Proper indentation for nested structures</p>"},{"location":"core-concepts/message-handling/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Start with System Message <pre><code># Set the context first\nclient.message_handler.add_message_system(\n    \"You are an expert Python developer.\"\n)\n</code></pre></p> </li> <li> <p>Build Conversations Properly <pre><code># Add user question\nclient.message_handler.add_message_user(\"What is a decorator?\")\n\n# Get and store response\nresponse: Answer = client.generate(result_type=Answer)\nclient.message_handler.add_message_assistant(response.content)\n\n# Follow-up question\nclient.message_handler.add_message_user(\"Can you show an example?\")\n</code></pre></p> </li> <li> <p>Use Structured Data When Relevant <pre><code>client.message_handler.add_message_block(\n    \"PARAMETERS\",\n    {\n        \"language\": \"python\",\n        \"complexity\": \"intermediate\",\n        \"include_examples\": True\n    }\n)\n</code></pre></p> </li> <li> <p>Clear History When Starting New Topics <pre><code># Start fresh for new conversation\nclient.message_handler.clear()\n</code></pre></p> </li> <li> <p>Maintain Conversation Context <pre><code># Add each response to the conversation\nclient.message_handler.add_message_assistant(response.content)\n</code></pre></p> </li> </ol>"},{"location":"core-concepts/message-handling/#complete-example","title":"Complete Example","text":"<pre><code>from pydantic2 import PydanticAIClient\nfrom pydantic import BaseModel, Field\n\nclass CodeExplanation(BaseModel):\n    explanation: str = Field(description=\"Detailed explanation\")\n    example: str = Field(description=\"Code example\")\n    notes: list[str] = Field(description=\"Additional notes\")\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    client_id=\"my_app\",\n    user_id=\"user123\"\n)\n\n# Set context\nclient.message_handler.add_message_system(\n    \"You are a Python expert. Provide clear explanations with examples.\"\n)\n\n# Add user question\nclient.message_handler.add_message_user(\n    \"Explain Python decorators\"\n)\n\n# Add context\nclient.message_handler.add_message_block(\n    \"PREFERENCES\",\n    {\n        \"skill_level\": \"intermediate\",\n        \"focus\": \"practical_usage\",\n        \"include_examples\": True\n    }\n)\n\n# Generate response\nresponse: CodeExplanation = client.generate(result_type=CodeExplanation)\n\n# Add response to conversation history\nclient.message_handler.add_message_assistant(response.explanation)\n</code></pre>"},{"location":"core-concepts/message-handling/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Type-Safe Responses</li> <li>Explore Online Search</li> <li>Check out Error Handling</li> </ul>"},{"location":"core-concepts/online-search/","title":"Online Search","text":"<p>Pydantic2 includes powerful online search capabilities, allowing AI models to access real-time information from the internet.</p>"},{"location":"core-concepts/online-search/#overview","title":"Overview","text":"<p>By default, language models are trained on data up to their cutoff date and cannot access current information. Pydantic2's online search feature solves this limitation by enabling models to:</p> <ol> <li>Search the internet for up-to-date information</li> <li>Cite sources properly</li> <li>Provide more accurate and timely responses</li> </ol>"},{"location":"core-concepts/online-search/#enabling-online-search","title":"Enabling Online Search","text":"<p>To enable online search, simply set the <code>online</code> parameter to <code>True</code> when initializing the client:</p> <pre><code>from pydantic2 import PydanticAIClient\n\n# Create client with online search enabled\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    online=True  # Enable internet access\n)\n</code></pre>"},{"location":"core-concepts/online-search/#example-retrieving-current-information","title":"Example: Retrieving Current Information","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import List\nfrom pydantic2 import PydanticAIClient\n\nclass NewsResponse(BaseModel):\n    \"\"\"Response model for news queries.\"\"\"\n    summary: str = Field(description=\"Summary of the news topic\")\n    key_points: List[str] = Field(description=\"Key points about the topic\")\n    sources: List[str] = Field(description=\"Source URLs for the information\")\n\nclient = PydanticAIClient(online=True)\n\n# Add system context\nclient.message_handler.add_message_system(\n    \"You are a news analyst. Provide current information with sources.\"\n)\n\n# Add user query\nclient.message_handler.add_message_user(\n    \"What are the latest developments in renewable energy?\"\n)\n\n# Generate response\nresponse: NewsResponse = client.generate(result_type=NewsResponse)\n\nprint(f\"Summary: {response.summary}\\n\")\nprint(\"Key Points:\")\nfor point in response.key_points:\n    print(f\"- {point}\")\nprint(\"\\nSources:\")\nfor source in response.sources:\n    print(f\"- {source}\")\n</code></pre>"},{"location":"core-concepts/online-search/#how-it-works","title":"How It Works","text":"<p>When online search is enabled, Pydantic2:</p> <ol> <li>Analyzes the user query to determine if online information is needed</li> <li>Performs web searches using search APIs</li> <li>Retrieves and processes relevant information from search results</li> <li>Provides the processed information to the model for generating responses</li> <li>Ensures sources are properly cited in the response</li> </ol>"},{"location":"core-concepts/online-search/#configuring-online-search","title":"Configuring Online Search","text":"<p>You can customize online search behavior:</p> <pre><code>client = PydanticAIClient(\n    online=True,\n    online_config={\n        \"max_results\": 5,        # Maximum number of search results to use\n        \"search_provider\": \"default\",  # Search provider to use\n        \"citation_style\": \"url\",  # How to format citations\n        \"timeout\": 30             # Search timeout in seconds\n    }\n)\n</code></pre>"},{"location":"core-concepts/online-search/#response-models-with-sources","title":"Response Models with Sources","text":"<p>When using online search, it's best practice to include a field for sources in your response models:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List\n\nclass ResearchResponse(BaseModel):\n    \"\"\"Response with source attribution.\"\"\"\n    content: str = Field(description=\"The main response content\")\n    sources: List[str] = Field(\n        default_factory=list,\n        description=\"Sources of information used in the response\"\n    )\n</code></pre>"},{"location":"core-concepts/online-search/#best-practices","title":"Best Practices","text":"<ol> <li>Be specific in prompts: Clearly specify what information you need</li> <li>Include date context: For time-sensitive information, specify when you need information from</li> <li>Verify sources: Always check the provided sources for accuracy</li> <li>Use appropriate models: More capable models handle online information better</li> <li>Balance with context: Don't rely solely on online search for questions that could be answered from model knowledge</li> </ol>"},{"location":"core-concepts/online-search/#limitations","title":"Limitations","text":"<ul> <li>Search results depend on the underlying search API quality</li> <li>Some websites may block scraping or have robots.txt restrictions</li> <li>Processing time increases when online search is enabled</li> <li>Not all information can be found online or accessed by the search system</li> </ul>"},{"location":"core-concepts/online-search/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Budget Management to control costs</li> <li>Explore Error Handling for robust applications</li> <li>Check out the CLI Tools for usage monitoring</li> </ul>"},{"location":"core-concepts/type-safe-responses/","title":"Type-Safe Responses","text":"<p>One of the core features of Pydantic2 is the ability to define structured, type-safe responses from language models.</p>"},{"location":"core-concepts/type-safe-responses/#the-problem-with-unstructured-text","title":"The Problem with Unstructured Text","text":"<p>Traditional language model APIs return unstructured text, which requires parsing and validation to be useful in applications. This leads to several issues:</p> <ul> <li>Unpredictable response formats</li> <li>Error-prone manual parsing</li> <li>Difficult integration with typed systems</li> <li>Inconsistent output structure</li> </ul>"},{"location":"core-concepts/type-safe-responses/#how-pydantic2-solves-this","title":"How Pydantic2 Solves This","text":"<p>Pydantic2 uses Pydantic models to define the structure and validation rules for LLM responses. The framework:</p> <ol> <li>Prompts the model with your schema requirements</li> <li>Processes the raw LLM output</li> <li>Validates it against your Pydantic model</li> <li>Returns a properly typed Python object</li> </ol>"},{"location":"core-concepts/type-safe-responses/#defining-response-models","title":"Defining Response Models","text":"<p>Create a Pydantic model to define your expected output structure:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List\n\nclass MovieReview(BaseModel):\n    title: str = Field(description=\"The title of the movie\")\n    rating: float = Field(ge=0, le=10, description=\"Rating from 0-10\")\n    pros: List[str] = Field(description=\"Positive aspects of the movie\")\n    cons: List[str] = Field(description=\"Negative aspects of the movie\")\n    summary: str = Field(description=\"Brief review summary\")\n</code></pre> <p>Key benefits:</p> <ul> <li>Self-documenting: Field descriptions explain what each field is for</li> <li>Validated: Ensure values meet your requirements (e.g., rating is between 0-10)</li> <li>Type safe: IDE autocompletion and type checking</li> <li>Default values: Handle missing data gracefully</li> </ul>"},{"location":"core-concepts/type-safe-responses/#generating-structured-responses","title":"Generating Structured Responses","text":"<p>Use your model with the message handler:</p> <pre><code>from pydantic2 import PydanticAIClient\n\nclient = PydanticAIClient()\n\n# Add system context\nclient.message_handler.add_message_system(\n    \"You are a movie critic. Provide detailed, balanced reviews.\"\n)\n\n# Add user request\nclient.message_handler.add_message_user(\n    \"Review the movie 'The Matrix'\"\n)\n\n# Generate a structured movie review\nreview = client.generate(result_type=MovieReview)\n\n# Access fields as attributes\nprint(f\"Movie: {review.title}\")\nprint(f\"Rating: {review.rating}/10\")\nprint(f\"Summary: {review.summary}\")\n\nprint(\"Pros:\")\nfor pro in review.pros:\n    print(f\"- {pro}\")\n\nprint(\"Cons:\")\nfor con in review.cons:\n    print(f\"- {con}\")\n</code></pre>"},{"location":"core-concepts/type-safe-responses/#complex-nested-models","title":"Complex Nested Models","text":"<p>You can create complex nested models for more sophisticated responses:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Dict, Optional\nfrom datetime import datetime\n\nclass Author(BaseModel):\n    name: str = Field(description=\"Author's full name\")\n    expertise: List[str] = Field(description=\"Areas of expertise\")\n\nclass Reference(BaseModel):\n    title: str = Field(description=\"Title of the reference\")\n    url: str = Field(description=\"URL of the reference\")\n    access_date: datetime = Field(description=\"When the reference was accessed\")\n\nclass ResearchReport(BaseModel):\n    title: str = Field(description=\"Report title\")\n    authors: List[Author] = Field(description=\"List of authors\")\n    summary: str = Field(description=\"Executive summary\")\n    findings: List[str] = Field(description=\"Key findings\")\n    methodology: str = Field(description=\"Research methodology\")\n    references: List[Reference] = Field(description=\"Sources referenced\")\n    limitations: Optional[List[str]] = Field(\n        default=None,\n        description=\"Limitations of the research\"\n    )\n</code></pre>"},{"location":"core-concepts/type-safe-responses/#handling-validation-errors","title":"Handling Validation Errors","text":"<p>When the LLM response doesn't match your model, Pydantic2 raises a <code>ValidationError</code>:</p> <pre><code>from pydantic2 import PydanticAIClient\nfrom pydantic2.client.exceptions import ValidationError\n\nclient = PydanticAIClient()\n\ntry:\n    client.message_handler.add_message_user(\n        \"Review the movie 'The Matrix'\"\n    )\n    review = client.generate(result_type=MovieReview)\nexcept ValidationError as e:\n    print(\"Response didn't match the expected format:\")\n    print(e.errors)  # List of validation errors\n    print(e.received_data)  # The raw data received\n</code></pre>"},{"location":"core-concepts/type-safe-responses/#best-practices","title":"Best Practices","text":"<ol> <li>Be specific with field descriptions: Clear descriptions help the model generate appropriate values</li> <li>Use validation constraints: Add constraints like <code>ge</code>, <code>le</code>, <code>min_length</code>, etc.</li> <li>Start simple: Begin with simpler models and add complexity gradually</li> <li>Include examples: If responses are inconsistent, provide examples in your prompts</li> <li>Use optional fields: Mark fields as <code>Optional</code> if they're not always required</li> <li>Provide default values: Use <code>default</code> or <code>default_factory</code> for fields that might be missing</li> </ol>"},{"location":"core-concepts/type-safe-responses/#advanced-type-hints","title":"Advanced Type Hints","text":"<p>Pydantic2 supports all of Pydantic's type hints:</p> <pre><code>from pydantic import BaseModel, Field, HttpUrl, EmailStr\nfrom typing import List, Dict, Optional, Union, Literal\nfrom datetime import datetime\nfrom enum import Enum\n\nclass Category(str, Enum):\n    TECH = \"technology\"\n    SCIENCE = \"science\"\n    HEALTH = \"health\"\n\nclass ArticleSummary(BaseModel):\n    title: str = Field(description=\"Article title\")\n    url: HttpUrl = Field(description=\"Article URL\")\n    publish_date: datetime = Field(description=\"Publication date\")\n    category: Category = Field(description=\"Article category\")\n    sentiment: Literal[\"positive\", \"neutral\", \"negative\"] = Field(\n        description=\"Overall sentiment\"\n    )\n    word_count: int = Field(ge=0, description=\"Number of words\")\n    contact: Optional[EmailStr] = Field(default=None, description=\"Contact email\")\n    tags: List[str] = Field(default_factory=list, description=\"Article tags\")\n    metadata: Dict[str, Union[str, int, bool]] = Field(\n        default_factory=dict,\n        description=\"Additional metadata\"\n    )\n</code></pre>"},{"location":"core-concepts/type-safe-responses/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Online Search</li> <li>Explore Budget Management</li> <li>Check Error Handling</li> </ul>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":"<p>This page provides simple examples to help you get started with Pydantic2.</p>"},{"location":"examples/basic-usage/#simple-text-generation","title":"Simple Text Generation","text":"<pre><code>from pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass Summary(BaseModel):\n    content: str = Field(description=\"Summarized content\")\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    client_id=\"my_app\",      # Required for tracking\n    user_id=\"user123\"       # Required for tracking\n)\n\n# Add message\nclient.message_handler.add_message_user(\n    \"Summarize the benefits of exercise.\"\n)\n\nresponse: Summary = client.generate(result_type=Summary)\nprint(response.content)\n</code></pre>"},{"location":"examples/basic-usage/#structured-output","title":"Structured Output","text":"<pre><code>from typing import List\nfrom pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass MovieRecommendation(BaseModel):\n    title: str = Field(description=\"Movie title\")\n    year: int = Field(description=\"Year of release\")\n    genre: List[str] = Field(description=\"Movie genres\")\n    summary: str = Field(description=\"Brief movie summary\")\n    rating: float = Field(ge=0, le=10, description=\"Rating out of 10\")\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    client_id=\"my_app\",\n    user_id=\"user123\"\n)\n\n# Add system context\nclient.message_handler.add_message_system(\n    \"You are a movie expert. Provide detailed recommendations.\"\n)\n\n# Add user request\nclient.message_handler.add_message_user(\n    \"Recommend a classic science fiction movie.\"\n)\n\nrecommendation = client.generate(result_type=MovieRecommendation)\n\nprint(f\"Title: {recommendation.title} ({recommendation.year})\")\nprint(f\"Genres: {', '.join(recommendation.genre)}\")\nprint(f\"Rating: {recommendation.rating}/10\")\nprint(f\"Summary: {recommendation.summary}\")\n</code></pre>"},{"location":"examples/basic-usage/#message-builder-pattern","title":"Message Builder Pattern","text":"<pre><code>from pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass Recipe(BaseModel):\n    name: str = Field(description=\"Recipe name\")\n    ingredients: list[str] = Field(description=\"List of ingredients\")\n    instructions: list[str] = Field(description=\"Step-by-step instructions\")\n    prep_time: int = Field(description=\"Preparation time in minutes\")\n    serves: int = Field(description=\"Number of servings\")\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    client_id=\"my_recipe_app\",\n    user_id=\"chef123\"\n)\n\n# Build the conversation\nclient.message_handler.add_message_system(\n    \"You are a professional chef specializing in simple recipes.\"\n)\n\nclient.message_handler.add_message_user(\n    \"I need a quick pasta recipe.\"\n)\n\n# Add context about ingredients\nclient.message_handler.add_message_block(\n    \"AVAILABLE_INGREDIENTS\",\n    [\"pasta\", \"olive oil\", \"garlic\", \"tomatoes\", \"cheese\"]\n)\n\n# Generate the recipe\nrecipe = client.generate(result_type=Recipe)\n\nprint(f\"# {recipe.name}\")\nprint(f\"Prep time: {recipe.prep_time} min | Serves: {recipe.serves}\\n\")\n\nprint(\"## Ingredients\")\nfor item in recipe.ingredients:\n    print(f\"- {item}\")\n\nprint(\"\\n## Instructions\")\nfor i, step in enumerate(recipe.instructions, 1):\n    print(f\"{i}. {step}\")\n</code></pre>"},{"location":"examples/basic-usage/#context-manager-usage","title":"Context Manager Usage","text":"<pre><code>from pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass Answer(BaseModel):\n    content: str = Field(description=\"Answer content\")\n\n# Using context manager for auto-cleanup\nwith PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    verbose=True\n) as client:\n    # First query\n    client.message_handler.add_message_user(\"What is Python?\")\n    response1 = client.generate(result_type=Answer)\n    print(f\"Answer 1: {response1.content}\\n\")\n\n    # Add response to conversation\n    client.message_handler.add_message_assistant(response1.content)\n\n    # Second query\n    client.message_handler.add_message_user(\"What are its main applications?\")\n    response2 = client.generate(result_type=Answer)\n    print(f\"Answer 2: {response2.content}\")\n\n    # Get usage stats before exiting context\n    stats = client.get_usage_stats()\n    print(f\"\\nTotal cost: ${stats.get('total_cost', 0):.4f}\")\n</code></pre>"},{"location":"examples/basic-usage/#budget-aware-usage","title":"Budget-Aware Usage","text":"<pre><code>from pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\nfrom pydantic2.client.exceptions import BudgetExceeded\n\nclass Analysis(BaseModel):\n    content: str = Field(description=\"Analysis content\")\n\n# Set a tight budget\nclient = PydanticAIClient(max_budget=0.01)  # $0.01 USD\n\ntry:\n    # Try to generate a response (might exceed budget)\n    client.message_handler.add_message_user(\n        \"Provide a detailed analysis of global economic trends.\"\n    )\n    response: Analysis = client.generate(result_type=Analysis)\n    print(response.content)\n\nexcept BudgetExceeded as e:\n    print(f\"Budget exceeded! Limit: ${e.budget_limit:.4f}, Cost: ${e.current_cost:.4f}\")\n\n    # Fall back to a smaller request\n    smaller_client = PydanticAIClient(max_budget=0.01)\n    smaller_client.message_handler.add_message_user(\n        \"Summarize current economic trends in one paragraph.\"\n    )\n    smaller_response = smaller_client.generate(result_type=Analysis)\n    print(f\"Fallback analysis: {smaller_response.content}\")\n</code></pre>"},{"location":"examples/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Try Chat Completion examples</li> <li>Learn about Error Handling</li> <li>Explore Budget Management</li> </ul>"},{"location":"examples/chat-completion/","title":"Chat Completion Example","text":"<p>This example demonstrates how to use Pydantic2 for chat completions with structured responses.</p>"},{"location":"examples/chat-completion/#basic-chat-example","title":"Basic Chat Example","text":"<pre><code>from pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass ChatResponse(BaseModel):\n    message: str = Field(description=\"The chat response message\")\n    confidence: float = Field(ge=0, le=1, description=\"Confidence score\")\n\n# Initialize client\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    client_id=\"my_chat_app\",\n    user_id=\"user123\"\n)\n\n# Set up the conversation\nclient.message_handler.add_message_system(\n    \"You are a helpful AI assistant. Be concise but informative.\"\n)\n\n# Add a user message\nclient.message_handler.add_message_user(\n    \"What is the capital of France?\"\n)\n\n# Generate response\nresponse: ChatResponse = client.generate(\n    result_type=ChatResponse\n)\n\nprint(f\"AI: {response.message}\")\nprint(f\"Confidence: {response.confidence}\")\n</code></pre>"},{"location":"examples/chat-completion/#multi-turn-conversation","title":"Multi-turn Conversation","text":"<pre><code>from pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass ChatResponse(BaseModel):\n    message: str = Field(description=\"The chat response message\")\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    client_id=\"travel_advisor\",\n    user_id=\"traveler456\"\n)\n\n# Initialize the conversation\nclient.message_handler.add_message_system(\n    \"You are a travel advisor helping plan a trip.\"\n)\n\n# First exchange\nclient.message_handler.add_message_user(\n    \"I'm planning a trip to Europe this summer.\"\n)\nresponse1 = client.generate(result_type=ChatResponse)\nprint(f\"AI: {response1.message}\")\n\n# Add response to history\nclient.message_handler.add_message_assistant(response1.message)\n\n# Second exchange\nclient.message_handler.add_message_user(\n    \"Which cities would you recommend in France?\"\n)\nresponse2 = client.generate(result_type=ChatResponse)\nprint(f\"AI: {response2.message}\")\n</code></pre>"},{"location":"examples/chat-completion/#chat-with-structured-data","title":"Chat with Structured Data","text":"<pre><code>from typing import List\nfrom pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass TravelResponse(BaseModel):\n    message: str = Field(description=\"Travel advice\")\n    places: List[str] = Field(description=\"Recommended places\")\n    budget: float = Field(description=\"Estimated daily budget in EUR\")\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    client_id=\"travel_planner\",\n    user_id=\"traveler789\"\n)\n\n# Set up conversation\nclient.message_handler.add_message_system(\n    \"You are a travel advisor for European destinations.\"\n)\n\n# Add user query\nclient.message_handler.add_message_user(\n    \"I want to visit Paris for 3 days.\"\n)\n\n# Add user preferences\nclient.message_handler.add_message_block(\n    \"PREFERENCES\",\n    {\n        \"budget_level\": \"medium\",\n        \"interests\": [\"art\", \"food\"],\n        \"travel_style\": \"relaxed\"\n    }\n)\n\n# Generate structured response\nresponse: TravelResponse = client.generate(result_type=TravelResponse)\n\nprint(f\"Advice: {response.message}\\n\")\nprint(\"Recommended Places:\")\nfor place in response.places:\n    print(f\"- {place}\")\nprint(f\"\\nEstimated daily budget: \u20ac{response.budget:.2f}\")\n</code></pre>"},{"location":"examples/chat-completion/#next-steps","title":"Next Steps","text":"<ul> <li>Check out Basic Usage examples</li> <li>Learn about Error Handling</li> <li>Explore Budget Management</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Learn how to configure the Pydantic2 client for your needs.</p>"},{"location":"getting-started/configuration/#quick-start","title":"Quick Start","text":"<pre><code>from pydantic2 import PydanticAIClient, ModelSettings\n\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",  # Required: Model identifier\n    client_id=\"my_app\",               # Required for usage tracking\n    user_id=\"user123\"                 # Required for usage tracking\n)\n</code></pre>"},{"location":"getting-started/configuration/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"getting-started/configuration/#essential-parameters","title":"Essential Parameters","text":"Parameter Type Required Description <code>model_name</code> str Yes Model identifier (e.g., \"openai/gpt-4o-mini\") <code>client_id</code> str Yes Your application identifier <code>user_id</code> str Yes End-user identifier <code>api_key</code> str No* OpenRouter API key (can be set via env var) <p>*API key can be set via <code>OPENROUTER_API_KEY</code> environment variable</p>"},{"location":"getting-started/configuration/#optional-parameters","title":"Optional Parameters","text":"Parameter Type Default Description <code>base_url</code> str \"https://openrouter.ai/api/v1\" API endpoint <code>verbose</code> bool False Enable detailed logging <code>retries</code> int 3 Number of retry attempts <code>online</code> bool False Enable internet access <code>max_budget</code> float None Maximum budget in USD"},{"location":"getting-started/configuration/#model-settings","title":"Model Settings","text":"<p>Configure model behavior using <code>ModelSettings</code>:</p> <pre><code>client = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",\n    model_settings=ModelSettings(\n        max_tokens=100,        # Maximum response length\n        temperature=0.7,       # Response randomness (0-1)\n        top_p=1.0,            # Nucleus sampling parameter\n        frequency_penalty=0.0  # Penalty for repetition\n    )\n)\n</code></pre>"},{"location":"getting-started/configuration/#usage-tracking","title":"Usage Tracking","text":""},{"location":"getting-started/configuration/#understanding-identifiers","title":"Understanding Identifiers","text":"<ul> <li> <p>client_id: Identifies your application   <pre><code>client_id=\"my_trading_bot\"  # Tracks usage per application\n</code></pre></p> </li> <li> <p>user_id: Identifies end-users   <pre><code>user_id=\"user123\"  # Tracks usage per user\n</code></pre></p> </li> </ul> <p>Both identifiers are required for usage tracking and budget management.</p>"},{"location":"getting-started/configuration/#usage-statistics","title":"Usage Statistics","text":"<pre><code># Get overall stats\nstats = client.get_usage_stats()\nprint(f\"Total cost: ${stats['total_cost']:.4f}\")\n\n# Get user-specific stats\nuser_stats = client.get_usage_stats(user_id=\"user123\")\nprint(f\"User cost: ${user_stats['total_cost']:.4f}\")\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<pre><code># Set common configuration values\nexport OPENROUTER_API_KEY=\"your-api-key\"\nexport PYDANTIC_CLIENT_ID=\"my_app\"\nexport PYDANTIC_BASE_URL=\"https://openrouter.ai/api/v1\"\n</code></pre>"},{"location":"getting-started/configuration/#message-handling","title":"Message Handling","text":"<p>For detailed information about building conversations and managing messages, see the Message Handling guide.</p>"},{"location":"getting-started/configuration/#error-handling","title":"Error Handling","text":"<pre><code>from pydantic2.client.exceptions import BudgetExceeded, NetworkError\n\ntry:\n    response: MyModel = client.generate(result_type=MyModel)\nexcept BudgetExceeded as e:\n    print(f\"Budget exceeded: ${e.current_cost:.4f} / ${e.budget_limit:.4f}\")\nexcept NetworkError as e:\n    print(f\"Network error: {e.message}\")\n</code></pre>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Try Basic Usage Examples</li> <li>Learn about Budget Management</li> <li>Explore Error Handling</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>OpenRouter API key (for model access)</li> <li>Internet connection (for online search feature)</li> </ul>"},{"location":"getting-started/installation/#installing-pydantic2","title":"Installing Pydantic2","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install pydantic2\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/markolofsen/pydantic2.git\ncd pydantic2\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#api-key-setup","title":"API Key Setup","text":"<p>Pydantic2 uses OpenRouter as its default model provider. You'll need to set up your API key:</p>"},{"location":"getting-started/installation/#environment-variable","title":"Environment Variable","text":"<pre><code>export OPENROUTER_API_KEY=your_api_key_here\n</code></pre>"},{"location":"getting-started/installation/#in-your-code","title":"In your code","text":"<pre><code>from pydantic2 import PydanticAIClient\n\nclient = PydanticAIClient(\n    api_key=\"your_api_key_here\"\n)\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>Create a test script to verify your installation:</p> <pre><code>from pydantic2 import PydanticAIClient\nfrom pydantic import BaseModel, Field\n\nclass TestResponse(BaseModel):\n    message: str = Field(description=\"Test message\")\n\nclient = PydanticAIClient(verbose=True)\n\n# Add a simple test message\nclient.message_handler.add_message_user(\"Hello, world!\")\n\n# Generate response\nresponse: TestResponse = client.generate(result_type=TestResponse)\nprint(response.message)\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/installation/#for-async-support","title":"For async support","text":"<pre><code>pip install aiohttp\n</code></pre>"},{"location":"getting-started/installation/#for-colored-logging","title":"For colored logging","text":"<pre><code>pip install colorlog\n</code></pre>"},{"location":"getting-started/installation/#for-development","title":"For development","text":"<pre><code>pip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>API Key Not Found <pre><code># Set API key in code\nclient = PydanticAIClient(api_key=\"your_api_key\")\n</code></pre></p> </li> <li> <p>Model Not Found <pre><code># Specify full model name\nclient = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\"\n)\n</code></pre></p> </li> <li> <p>Budget Errors <pre><code># Set appropriate budget\nclient = PydanticAIClient(max_budget=10.0)\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<ul> <li>Check our GitHub Issues</li> <li>Email support: support@unrealos.com</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Configuration Guide</li> <li>Basic Usage Examples</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Pydantic2 in just a few minutes.</p>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<p>First, install the package from PyPI:</p> <pre><code>pip install pydantic2\n</code></pre>"},{"location":"getting-started/quick-start/#set-up-api-keys","title":"Set Up API Keys","text":"<p>For most LLM providers, you'll need to set up API keys. You can use environment variables:</p> <pre><code>export OPENROUTER_API_KEY=your_api_key_here\n</code></pre>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<p>Here's a complete example that demonstrates the core functionality:</p> <pre><code>from typing import List\nfrom pydantic import BaseModel, Field\nfrom pydantic2 import PydanticAIClient\n\nclass ChatResponse(BaseModel):\n    \"\"\"Response format for chat messages.\"\"\"\n    message: str = Field(description=\"The chat response message\")\n    sources: List[str] = Field(default_factory=list, description=\"Sources used in the response\")\n    confidence: float = Field(ge=0, le=1, description=\"Confidence score of the response\")\n\n\ndef main():\n    # Initialize client with usage tracking using context manager\n    with PydanticAIClient(\n        model_name=\"openai/gpt-4o-mini-2024-07-18\",\n        client_id=\"test_client\",\n        user_id=\"test_user\",\n        verbose=False,\n        retries=3,\n        online=True,\n        # max_budget=0.0003\n    ) as client:\n        try:\n            # Set up the conversation with system message\n            client.message_handler.add_message_system(\n                \"You are a helpful AI assistant. Be concise but informative.\"\n            )\n\n            # Add user message\n            client.message_handler.add_message_user(\n                \"What is the capital of France?\"\n            )\n\n            # Add structured data block (optional)\n            client.message_handler.add_message_block(\n                \"CONTEXT\",\n                {\n                    \"topic\": \"Geography\",\n                    \"region\": \"Europe\",\n                    \"country\": \"France\"\n                }\n            )\n\n            # Generate response\n            response: ChatResponse = client.generate(\n                result_type=ChatResponse\n            )\n\n            # Print the response\n            print(\"\\nAI Response:\")\n            print(response.model_dump_json(indent=2))\n\n            # Print usage statistics\n            stats = client.get_usage_stats()\n            if stats:\n                print(\"\\nUsage Statistics:\")\n                print(f\"Total Requests: {stats.get('total_requests', 0)}\")\n                print(f\"Total Cost: ${stats.get('total_cost', 0):.4f}\")\n\n        except Exception as e:\n            print(f\"\\nError: {str(e)}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"getting-started/quick-start/#key-components","title":"Key Components","text":""},{"location":"getting-started/quick-start/#response-models","title":"Response Models","text":"<p>Define structured output with Pydantic models:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List\n\nclass Analysis(BaseModel):\n    summary: str = Field(description=\"Brief summary\")\n    key_points: List[str] = Field(description=\"Main points\")\n    sentiment: float = Field(ge=-1, le=1, description=\"Sentiment score\")\n</code></pre>"},{"location":"getting-started/quick-start/#client-initialization","title":"Client Initialization","text":"<pre><code>client = PydanticAIClient(\n    model_name=\"openai/gpt-4o-mini\",  # Model to use\n    online=True,                       # Enable internet access\n    verbose=True,                      # Show detailed logs\n    retries=3,                         # Auto-retry on failures\n    max_budget=1.0                     # Set budget limit (in USD)\n)\n</code></pre>"},{"location":"getting-started/quick-start/#message-handling","title":"Message Handling","text":"<pre><code># Add system context\nclient.message_handler.add_message_system(\n    \"You are a helpful AI assistant with expertise in programming.\"\n)\n\n# Add user message\nclient.message_handler.add_message_user(\n    \"Can you explain how async/await works in Python?\"\n)\n\n# Add structured data\nclient.message_handler.add_message_block(\n    \"CODE_EXAMPLE\",\n    {\n        \"language\": \"python\",\n        \"code\": \"async def fetch_data():\\n    result = await api_call()\\n    return result\"\n    }\n)\n</code></pre>"},{"location":"getting-started/quick-start/#generate-responses","title":"Generate Responses","text":"<pre><code># Synchronous generation\nresponse: Analysis = client.generate(result_type=Analysis)\n\n# Asynchronous generation\nasync def get_analysis():\n    async with PydanticAIClient() as client:\n        return await client.generate_async(result_type=Analysis)\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the Error Handling guide</li> <li>Learn about Budget Management</li> <li>Explore CLI Tools for database viewing</li> </ul>"}]}